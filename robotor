#!/usr/bin/perl

# Robotor, the mail stuff
# Copyright (C) 2019 - 2023 Michal Gr√©zl
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.


use File::Copy;
use Getopt::Long qw(GetOptions);
use POSIX qw(strftime);

if (not @ARGV) {
  &help();
}

my $virtusertable = "/etc/mail/virtusertable";
my $virtusertable = "virtusertable";
my $useradd = "/usr/sbin/useradd";
my %opts;

$p = "none";

GetOptions(\%opts,
  'l=s' => \$l,
  'p=s' => \$p,
  'f=s' => \$f,
  'a=s' => \$a,
) or &help();


if ($a ne "") {
  if ($l eq "") {
    die "no login (-l) fsck";
  }
}

if ($a eq "alias")
{
  print "alias $l\n";
  &add_alias($l);
} elsif ($a eq "avpostfix") {
  print "adding postfix virtual user $l\n";
  $virtusertable = "/etc/postfix/vmailbox";
  &add_virtual_postfix($l);
} elsif ($a eq "dvpostfix") {
  print "deleting postfix virtual user $l\n";
  $virtusertable = "/etc/postfix/vmailbox";
  &del_user($l,"postfix");
} elsif ($a eq "fwshow") {
  print "showing .forward for user $l\n";
  &show_forward($l);
} elsif ($a eq "fwadd") {
  if ($f eq "") {
    die "need -f";
  }
  print "adding stuff ($f) to .forward for user $l\n";
  &add_forward($l, $f);
} elsif ($a eq "fwdel") {
  if ($f eq "") {
    die "need -f";
  }
  print "deleting stuff ($f) from .forward for user $l\n";
  &delete_forward($l, $f);
} elsif ($a eq "fwdelself") {
  print "deleting user ($l) from his own .forward\n";
  &delete_forward($l, $l);
} else {
  print "no action $l\n";
}

################################################################################
sub set_passwd()
################################################################################
{
}

################################################################################
sub grep_virtual()
################################################################################
{
  my $what = shift;
  my $fh;

  $filename = $virtusertable;
  open(my $fh, '<', $filename) or die "Could not open file '$filename' $!";
  my @virtual = <$fh>;

  print"-$what-\n";

  my @g = grep(/^$what\@/, @virtual);

  foreach (@g) {print;}
  if (@g) {
    print "found\n";
    return 1;
  }

  return 0;
}

################################################################################
sub grep_file()
################################################################################
{
  my ($filename, $what) = @_;
  my $fh;

  open(my $fh, '<', $filename) or die "Could not open file '$filename' $!";
  my @virtual = <$fh>;

  print "grep(): -$what-\n";

  my @g = grep(/$what/, @virtual);

  if (@g) {
    print "grep():found\n";
    return 1;
  }

  return 0;
}


################################################################################
sub backup_file()
################################################################################
{
  my ($filename) = @_;
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
  my $now_string = strftime "%y%m%d", localtime;

  print "* now is $now_string\n";

  $backup = $filename . "." . $now_string;

  print "* backing up $filename to $backup\n";
  copy($filename, $backup) or die "Copy failed: $!";

}

################################################################################
sub add_alias()
################################################################################
{
  my ($l) = @_;
  $filename = "/etc/aliases";

  print "* start\n";

  if (&grep_file($filename, '^' . $l . ': .*$')) {
    print "* not adding $l, already there\n";
    return;
  }

  &backup_file($filename);

  print "* adding to aliases $l\n";

  open(my $fh, '>>', $filename) or die "Could not open file '$filename' $!";

  print $fh "$l: $l\@postfix.hzsol.cz\n";
  close $fh;
}

################################################################################
sub del_virtual()
################################################################################
{
  my ($l) = @_;

  print "* deleting user\n";
  print "no action \n";
}

################################################################################
sub del_virtual_postfix()
################################################################################
{
  my ($l) = @_;
  print "  * deleting from $virtusertable\n";
  &backup_file($virtusertable);

  if (!&grep_file($virtusertable, '^' . $l . '@.*.cz .*$')) {
    print "   * not deleting $l, not in $virtusertable\n";
    return;
  }

  print "  * user found\n";

  $outfile = $virtusertable.".new."."$$";
  print "  * out: $outfile\n";
  open(my $fhin, '<', $virtusertable) or die "Could not open file '$virtusertable' $!";
  open(my $fhout, '>', $outfile) or die "Could not open file '$outfile' $!";

  while (<$fhin>) {
    if ($_ =~ "$l\@.*.cz .*.cz/Maildir/") {
      print " found ";
    } else {
      print $fhout $_;
      print ".";
    }
  }
  print "\n";

  close $fhout;
  close $fhin;
  system ("mv $outfile $virtusertable")
}

sub del_virtual_sendmail()
{
  print "  * virtual user from sendmail\n";
}

################################################################################
sub add_virtual()
################################################################################
{
  my ($l) = @_;

  print "* start\n";

  if (&grep_virtual($l)) {
    print "* not adding $l, already there\n";
    return;
  }

  print "* adding to virtualtable $l\n";
  $filename = "/etc/mail/virtusertable";

  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);

  my $now_string = strftime "%y%m%d", localtime;
  print "* now is $now_string\n";

  $backup = "/etc/mail/virtusertable.".$now_string;

  copy("/etc/mail/virtusertable", $backup) or die "Copy failed: $!";

  open(my $fh, '>>', $filename) or die "Could not open file '$filename' $!";

  print $fh $l."\@hzsol.cz hzsol+%1\n";
  print $fh $l."\@olk.izscr.cz olkizscr+%1\n";
  close $fh;
}

################################################################################
sub add_virtual_postfix()
################################################################################
{
  my ($l) = @_;

  print "* start\n";

  if (&grep_virtual($l)) {
    print "* not adding $l, already there\n";
    return;
  }

  print "* adding to vmailbox $l\n";

  $filename = "/etc/postfix/vmailbox";

  &backup_file($filename);

  open(my $fh, '>>', $filename) or die "Could not open file '$filename' $!";

  print $fh $l."\@hzsol.cz hzsol.cz/Maildir/\n";
  print $fh $l."\@olk.izscr.cz olk.izscr.cz/Maildir/\n";
  close $fh;
}


################################################################################
sub del_user()
################################################################################
{
  my ($l, $type) = @_;
  print "* trying to delete user in $type mode ...\n";

  if ($type eq "postfix") {
    &del_virtual_postfix($l);
  }
}

################################################################################
sub add_user()
################################################################################
{
  print "* trying to add user $l $p ...\n";

  my $loginname = $l;
  my $pwstring = $p;
  my $salt = "hzsololol$$";

  if ($l eq "root") {
    die "root died";
  }

  my ($name, $passwd, $uid, $gid, $quota, $comment, $gcos, $dir, $shell) = getpwnam ($l);

  if ($uid) {
   print "* user is already there, uid $uid\n";
  } else {
   print "* adding user\n";
  }

  if ($p ne "none") {
    $pwhash = crypt($pwstring,"\$6\$$salt\$");
    print "* pw hash is $pwhash\n";
    $cmd = "/usr/sbin/useradd -p '$pwhash' $loginname";
    print "* running $cmd\n";
  } else {
    print "* pw is NOT set\n";
    $cmd = "/usr/sbin/useradd $loginname";
    print "* running $cmd\n";
  }
  my $r = system ($cmd);
  print "* return code: $r\n";

  my ($name, $passwd, $uid, $gid, $quota, $comment, $gcos, $dir, $shell) = getpwnam ($l);

  if ($uid) {
   print "* success, uid $uid\n";
  } else {
   print "* failure\n";
  }

}


################################################################################
sub exist_forward()
################################################################################
{
  my $loginname = shift;
  return (-e "/home/" . $loginname ."/.forward");
}

################################################################################
sub is_self_forward()
################################################################################
{
  my $l = shift;
  return &grep_file("/home/" . $l ."/.forward", '^' . $l . '$');
}

################################################################################
sub is_stuff_forward()
################################################################################
{
  my ($l, $what) = @_;
  return &grep_file("/home/" . $l ."/.forward", '^' . $what . '$');
}


################################################################################
sub show_forward()
################################################################################
{
  my $l = shift;

  my $fw = "/home/" . $l ."/.forward";

  if (&exist_forward($l)) {
    print "* .forward is present\n";
  } else {
    print "* .forward not found\n";
    return;
  }

  if (&is_self_forward($l)) {
    print "* forwarding to self\n";
  }

  open(my $fh, '<', $fw) or die "Could not open file '$filename' $!";
  my @fw_content = <$fh>;

  foreach (@fw_content) {
    print;
  }

}

################################################################################
sub add_forward()
################################################################################
{
  my ($l, $what) = @_;
  my $fw = "/home/" . $l ."/.forward";

  if (&exist_forward($l)) {
    print "  - updating $l\n";
    if (&is_stuff_forward($l, $what)) {
      print "    - already there\n";
    } else {
      print "    - adding $what\n";
      my $f;
      open ($f,">>", $fw) or die;
      print $f "$what\n";
      close $f
    }
  } else {
    print "  - adding ($what) to $l\n";
    my $f;
    open ($f,">", $fw) or die;
    print $f "$l\n";
    if ($what ne "" and $what ne $l) {
      print $f "$what\n";
    }
    close $f;
  }
}

################################################################################
sub delete_forward()
################################################################################
{
  my ($l, $what) = @_;
  my $lines = 0;

  $dot_forward = "/home/" . $l ."/.forward";
  $dot_forward_out = "/home/" . $l ."/.forward.out";

  open(my $fin, '<', $dot_forward) or die "Could not open .forward '$filename' $!";
  open(my $fout, '>', $dot_forward_out) or die "Could not open ouput  '$filename' $!";

  my @forward = <$fin>;

  foreach $i (@forward)
  {
    chomp $i;
    if ($i ne $what) {
      print $fout $i . "\n";
      $lines++;
    }
  }

  close $fin;
  close $fout;

  rename $dot_forward, $dot_forward.".bak" or die "cannot rename old dotforward";
  rename $dot_forward_out, $dot_forward or die "cannot rename .old to dotforward";

  if (!$lines) {
    print "  - empty .forward, will delete\n";
    unlink $dot_forward or die "CANNOT DELETE";
  }

}


################################################################################
sub delete_self_forward()
################################################################################
{
  my $l = shift;
  &delete_forward($l, $l);
}

################################################################################
sub help()
################################################################################
{
#actions 
  my @actions = ("avpostfix", "dvpostfix", "alias", "fwshow", "fwadd", "fwdel", "fwdelself");

  print "ROBOTOR v0.2\n\n";

  print "$0 help:
  -a : action
  -f : forward stuff
  -l : login name
  -p : password
  -s : show users and forwards 
  \n";

  print "actions: \n";
  foreach (sort(@actions)) {print; print ",";}
  print "\n";

  die("bad parameters");
}

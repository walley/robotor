#!/usr/bin/perl
use Getopt::Long qw(GetOptions);
use POSIX qw(strftime);

if (not @ARGV) {
  &help();
}

my $virtusertable = "/etc/mail/virtusertable";
my $virtusertable = "virtusertable";
my $useradd = "/usr/sbin/useradd";
my %opts;

$p = "none";

GetOptions(\%opts,
  'l=s' => \$l,
  'p=s' => \$p,
  'run',
) or &help();


################################################################################
sub set_passwd()
################################################################################
{
}

################################################################################
sub grep_virtual()
################################################################################
{
  my $what = shift;
  my $fh;

  $filename = $virtusertable;
  open(my $fh, '<', $filename) or die "Could not open file '$filename' $!";
  my @virtual = <$fh>;

  print"-$what-\n";

  my @g = grep(/^$what\@/, @virtual);

  foreach (@g) {print;}
  if (@g) {
    print "found\n";
    return 1;
  }

  return 0;
}

################################################################################
sub add_alias()
################################################################################
{
}


################################################################################
sub add_virtual()
################################################################################
{
  my ($l) = @_;

  print "* start\n";

  if (&grep_virtual($l)) {
    print "* not adding $l, already there\n";
    return;
  }

  print "* adding to virtualtable $l\n";
  $filename = "/etc/mail/virtusertable";

  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);

  my $now_string = strftime "%y%m%d", localtime;
  print "* now is $now_string\n";

return;
  $backup = "/etc/mail/virtusertable.".$now_string;

  copy("/etc/mail/virtusertable", $backup) or die "Copy failed: $!";

  open(my $fh, '>>', $filename) or die "Could not open file '$filename' $!";

  print $fh $l."\@hzsol.cz hzsol+%1\n";
  print $fh $l."\@olk.izscr.cz olkizscr+%1\n";
}

################################################################################
sub add_user()
################################################################################
{
  print "* trying to add user $l $p ...\n";

  my $loginname = $l;
  my $pwstring = $p;
  my $salt = "hzsololol$$";

  if ($l eq "root") {
    die "root died";
  }

  my ($name, $passwd, $uid, $gid, $quota, $comment, $gcos, $dir, $shell) = getpwnam ($l);

  if ($uid) {
   print "* user is already there, uid $uid\n";
  } else {
   print "* adding user\n";
  }

  if ($p ne "none") {
    $pwhash = crypt($pwstring,"\$6\$$salt\$");
    print "* pw hash is $pwhash\n";
    $cmd = "/usr/sbin/useradd -p '$pwhash' $loginname";
    print "* running $cmd\n";
  } else {
    print "* pw is NOT set\n";
    $cmd = "/usr/sbin/useradd $loginname";
    print "* running $cmd\n";
  }
  my $r = system ($cmd);
  print "* return code: $r\n";

  my ($name, $passwd, $uid, $gid, $quota, $comment, $gcos, $dir, $shell) = getpwnam ($l);

  if ($uid) {
   print "* success, uid $uid\n";
  } else {
   print "* failure\n";
  }

}

################################################################################
sub help()
################################################################################
{
  print "$0 help:
  -l - login name
  -p - xxxx\n";
  die("bad parameters");
}
